"""Functions for storing and retrieving contacts"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_database.ipynb.

# %% auto 0
__all__ = ['sample_contacts', 'default_db', 'ContactDB']

# %% ../nbs/02_database.ipynb 3
from fasthtml.common import *
from fastcore.test import *
from dataclasses import dataclass
from fastcore.basics import *

from .models import *

# %% ../nbs/02_database.ipynb 5
sample_contacts = [
    Contact(1, "John Doe", "john@example.com", "555-1234", "123 Main St", True),
    Contact(2, "Jane Smith", "jane@example.com", "555-5678", "456 Oak Ave", False),
    Contact(3, "Bob Johnson", "bob@example.com", "555-9012", "789 Pine Rd", False),
]

# %% ../nbs/02_database.ipynb 7
class ContactDB:
    "Simple in-memory database for contacts"
    def __init__(self, initial_contacts=None):
        "Initialize with optional contacts"
        self.contacts = initial_contacts.copy() if initial_contacts else []
    
    def get_all(self):
        "Get all contacts"
        return self.contacts
    
    def get(self, contact_id):
        "Get a contact by ID"
        return next((c for c in self.contacts if c.id == contact_id), None)
    
    def search(self, query):
        "Search contacts by name, email, or phone"
        if not query:
            return self.contacts
        query = query.lower()
        return [c for c in self.contacts if query in c.name.lower() or 
                                           query in c.email.lower() or 
                                           query in c.phone.lower()]
    
    def add(self, contact):
        "Add a new contact"
        if not self.contacts:
            contact.id = 1
        else:
            contact.id = max(c.id for c in self.contacts) + 1
        self.contacts.append(contact)
        return contact
    
    def update(self, contact):
        "Update an existing contact"
        for i, c in enumerate(self.contacts):
            if c.id == contact.id:
                self.contacts[i] = contact
                return True
        return False
    
    def delete(self, contact_id):
        "Delete a contact by ID"
        original_length = len(self.contacts)
        self.contacts = [c for c in self.contacts if c.id != contact_id]
        return len(self.contacts) < original_length

# %% ../nbs/02_database.ipynb 11
# Create a default database instance with sample data
default_db = ContactDB(sample_contacts)
